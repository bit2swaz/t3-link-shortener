// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String    @id @default(cuid())
    name             String?
    email            String?   @unique
    emailVerified    DateTime?
    image            String?
    password         String? // Hashed password for email/password auth
    subscriptionPlan String    @default("free") // "free" | "pro" | "enterprise"
    accounts         Account[]
    sessions         Session[]
    links            Link[]
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Link {
    id          String       @id @default(cuid())
    slug        String       @unique
    originalUrl String
    userId      String? // nullable for anonymous links
    user        User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
    clicks      ClickEvent[]
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    createdByIp String // to track anonymous users
    clickCount  Int          @default(0)

    @@index([userId])
    @@index([createdByIp])
    @@index([slug])
}

model ClickEvent {
    id        String   @id @default(cuid())
    linkId    String
    link      Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)
    timestamp DateTime @default(now())
    ip        String
    userAgent String
    country   String? // Optional: for future geo-tracking
    city      String? // Optional: for future geo-tracking

    @@index([linkId])
    @@index([timestamp])
}
